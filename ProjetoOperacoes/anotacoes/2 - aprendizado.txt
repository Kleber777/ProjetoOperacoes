Em herança a clase base pode receber a classe filha tranquilamente (seja por atribuição ou até mesmo parâmetro). Agora o contrário é possível somente através do que
chamamos de cast. 

Classes abstratas não podem ser mapeadas. (Entity Framework)

Em herança, quando se tem lista sem tentar usar um foreach é como se a herança não existisse.

Uma classe base não pode servir de Contexto para o entity framework.
    PostgresException: 42703: column Extent1.Discriminator does not exist -- Dá este erro. 

Entity Framework exige que as classes tenham uma propriedade ID por padrão. Tentei fazer isso por herança porém deu errado. Acreditto que seja por conta da classe base não ter uma annotation 
de tabela. O que de acordo com outros testes também não é possivel. Então a propriedade ID tem que estar na classe que será representada pelo contexto 

A classe que implementa a interface não pode deixar o método do "contrato" como sendo private. 

Não faz sentido trabalhar com classe abstratra para ser a classe referência do builder. 
    Tirar o abstract, mas por ela ser herdada por outras classes simplesmente acontece de não dar para trabalhar com entity 
    framework.

No padrão builder os components são classes / enums (associações do objeto principal).
A interface builder pega todos os parametros necessários e transforma em métodos onde a classe implementadora irá definir 
propriedade por propriedade. 
E o director é como serão passados e quais métodos serão necessários ser chamados.

It means that entity is not attached (it was not loaded by the same context instance). Try this:

Tem que terminar todo o comando primeiro para depois chamar o construtor. Por consenquência disso por isso que ele executa o método que é chamado 
no comando antes do construtor da classe, mesmo a linha do método estando após a trocada de página. 

Para atualizar uma entidade com entity framework devemos usar o namespace 'using System.Data.Entity.Migrations;' e chamar 
o método AddOrUpdate() através  dbcontext .